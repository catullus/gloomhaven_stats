mindthief_attack_deck = c(2,3,1,3,1,2,1,1)
base_modifier_deck <- c(0, 0, 0, 0, 0,0, 1,1,1,1,1,-1,-1,-1,-1,-1, 2, -2, "2x", "miss")
mt_augments <- list(minds_weakness = list(attack = 2, debuff = "", buff = ""),
withering_claw = list(attack = 0, debuff = "poison, muddle", buff = ""),
feedback_loop = list(attack = 0, debuff = "", buff = "+1 shield"))
minds_weakness_sim1 = replicate(1000, expr = sim_mindthief(modifier_deck = base_modifier_deck, attack_deck = mindthief_attack_deck, augment = mt_augments[[1]], ally = 1))
minds_weakness_sim0 = replicate(1000, expr = sim_mindthief(modifier_deck = base_modifier_deck, attack_deck = mindthief_attack_deck, augment = mt_augments[[1]], ally = 0))
mindthief_attack_deck = c(2,3,1,3,1,2,1,1)
base_modifier_deck <- c(0, 0, 0, 0, 0,0, 1,1,1,1,1,-1,-1,-1,-1,-1, 2, -2, "2x", "miss")
mt_augments <- list(minds_weakness = list(attack = 2, debuff = "", buff = ""),
withering_claw = list(attack = 0, debuff = "poison, muddle", buff = ""),
feedback_loop = list(attack = 0, debuff = "", buff = "+1 shield"))
minds_weakness_sim1 = replicate(1000, expr = sim_mindthief(modifier_deck = base_modifier_deck, attack_deck = mindthief_attack_deck, augment = mt_augments[[1]], ally = 1))
minds_weakness_sim0 = replicate(1000, expr = sim_mindthief(modifier_deck = base_modifier_deck, attack_deck = mindthief_attack_deck, augment = mt_augments[[1]], ally = 0))
## 3. simulation logic
sim_mindthief <- function(modifier_deck, attack_deck = c(2,2), augment, ally=0, ally_attack = c(2, 2)){
## realistically, this only simulates the first hit on a creature plus a follow-up hit if there is an ally adjacent and attacking the same creature (ally = 1)
## 1. draw a random modifier card
## 2. add augment to this, if possible
## 3. estimate damage output
## 3b. if ally == 1, add base +2 attack PLUS anything from debuff e.g. poison, wound
## 4. store total damage output and debuff
### 1. draw a random card, parse it into a number or result...if miss, then damage = 0, if 2x, then double damage
output = list()
card = sample(x = modifier_deck, size = 1)
card_check = as.integer(card)
##> branch A1 = card is a string
if (is.na(card_check)){
##>> branch B1a = is ally attacking creature too?
if (ally == 1){
if (card == "2x"){
## DOUBLE
damage = (2 * ((sample(x = attack_deck, size = 1) + augment$attack))) +
sample(x = ally_attack, size = 1) +
ifelse(grepl(x = augment$debuff, pattern = "poison"), 1, 0)
#print(paste(damage, "ally=", ally, "ally_attack=", ally_attack, "aug_debuff =",augment$debuff, "aug_attack=", augment$attack))
return(damage)
} else if (card == "miss"){
## MISS
damage = 0
#print(paste(damage, "ally=", ally, "ally_attack=", ally_attack, "aug_debuff =",augment$debuff, "aug_attack=", augment$attack))
return(damage)
}
##>> branch B1b
} else if (ally == 0){
if (card == "2x"){
## DOUBLE
## if no ally, spread poison damage out over 2 rounds since I haven't tracked state yet
damage = (2 * ((sample(x = attack_deck, size = 1) + augment$attack))) +
ifelse(grepl(x = augment$debuff, pattern = "poison"), 0.5, 0)
#print(paste(damage, "ally=", ally, "ally_attack=", ally_attack, "aug_debuff =",augment$debuff, "aug_attack=", augment$attack))
return(damage)
} else if (card == "miss"){
## MISS
damage = 0
#print(paste(damage, "ally=", ally, "ally_attack=", ally_attack, "aug_debuff =",augment$debuff, "aug_attack=", augment$attack))
return(damage)
}
} else if (ally == 2){
if (card == "2x"){
## DOUBLE
damage = (2 * ((sample(x = attack_deck, size = 1) + augment$attack))) +
sample(x = ally_attack, size = 1) +
ifelse(grepl(x = augment$debuff, pattern = "poison"), 1, 0) +
## second ally attack
sample(x = ally_attack, size = 1) +
ifelse(grepl(x = augment$debuff, pattern = "poison"), 1, 0)
#print(paste(damage, "ally=", ally, "ally_attack=", ally_attack, "aug_debuff =",augment$debuff, "aug_attack=", augment$attack))
return(damage)
} else if (card == "miss"){
## MISS
damage = 0
#print(paste(damage, "ally=", ally, "ally_attack=", ally_attack, "aug_debuff =",augment$debuff, "aug_attack=", augment$attack))
return(damage)
}
}
##> branch A2 = card is an integer
} else if (!is.na(card_check)){
##>> branch B2a = if ally is attacking same creature
if (ally == 1){
damage = as.integer(card) +
sample(x = attack_deck, size = 1) +
augment$attack +
sample(x = ally_attack, size = 1) +
ifelse(grepl(x = augment$debuff, pattern = "poison"), 1, 0)
#print(paste(damage, "ally=", ally, "ally_attack=", ally_attack, "aug_debuff =",augment$debuff, "aug_attack=", augment$attack))
return(damage)
##>> branch B2b
} else if (ally == 0){
## if no ally, spread poison damage out over 2 rounds since I haven't tracked state yet
damage = as.integer(card) +
sample(x = attack_deck, size = 1) +
augment$attack +
ifelse(grepl(x = augment$debuff, pattern = "poison"), 0.5, 0)
#print(paste(damage, "ally=", ally, "ally_attack=", ally_attack, "aug_debuff =",augment$debuff, "aug_attack=", augment$attack))
return(damage)
} else if (ally == 2){
damage = as.integer(card) +
sample(x = attack_deck, size = 1) +
augment$attack +
sample(x = ally_attack, size = 1) +
ifelse(grepl(x = augment$debuff, pattern = "poison"), 1, 0) +
## second ally attack
sample(x = ally_attack, size = 1) +
ifelse(grepl(x = augment$debuff, pattern = "poison"), 1, 0)
#print(paste(damage, "ally=", ally, "ally_attack=", ally_attack, "aug_debuff =",augment$debuff, "aug_attack=", augment$attack))
return(damage)
}
} ## branch B2
} # function closer
### test numeric cards
sim_mindthief(modifier_deck = base_modifier_deck, augment = mt_augments[[1]], ally = 1)
### test string cards
sim_mindthief(modifier_deck = "miss", augment = mt_augments[[1]], ally = 1)
## mindthief_sims
mindthief_attack_deck = c(2,3,1,3,1,2,1,1)
##
base_modifier_deck <- c(0, 0, 0, 0, 0,0, 1,1,1,1,1,-1,-1,-1,-1,-1, 2, -2, "2x", "miss")
## 2. set augment
mt_augments <- list(minds_weakness = list(attack = 2, debuff = "", buff = ""),
withering_claw = list(attack = 0, debuff = "poison, muddle", buff = ""),
feedback_loop = list(attack = 0, debuff = "", buff = "+1 shield"))
minds_weakness_sim1 = replicate(1000, expr = sim_mindthief(modifier_deck = base_modifier_deck, attack_deck = mindthief_attack_deck, augment = mt_augments[[1]], ally = 1))
minds_weakness_sim0 = replicate(1000, expr = sim_mindthief(modifier_deck = base_modifier_deck, attack_deck = mindthief_attack_deck, augment = mt_augments[[1]], ally = 0))
withering_claw_sim1 = replicate(1000, expr = sim_mindthief(modifier_deck = base_modifier_deck, attack_deck = mindthief_attack_deck, augment = mt_augments[[2]], ally = 1))
withering_claw_sim0 = replicate(1000, expr = sim_mindthief(modifier_deck = base_modifier_deck, attack_deck = mindthief_attack_deck, augment = mt_augments[[2]], ally = 0))
minds_weakness_sim2 = replicate(1000, expr = sim_mindthief(modifier_deck = base_modifier_deck, attack_deck = mindthief_attack_deck, augment = mt_augments[[1]], ally = 2))
withering_claw_sim2 = replicate(1000, expr = sim_mindthief(modifier_deck = base_modifier_deck, attack_deck = mindthief_attack_deck, augment = mt_augments[[2]], ally = 2))
par(mfrow=c(3,2))
max_label = max(minds_weakness_sim1, minds_weakness_sim0, withering_claw_sim1, withering_claw_sim0, withering_claw_sim2, minds_weakness_sim2)
hist(minds_weakness_sim2, main = paste("TMW, ally = 2;",mean(minds_weakness_sim2)), xlim = c(0, max_label))
hist(withering_claw_sim2, main = paste("WC, ally = 2;",mean(withering_claw_sim2)), xlim = c(0, max_label))
hist(minds_weakness_sim1, main = paste("TMW, ally = 1;", mean(minds_weakness_sim1)), xlim = c(0, max_label))
hist(withering_claw_sim1, main = paste("WC, ally = 1;",mean(withering_claw_sim1)), xlim = c(0, max_label))
hist(minds_weakness_sim0, main = paste("TMW, ally = 0;",mean(minds_weakness_sim0)), xlim = c(0, max_label))
hist(withering_claw_sim0, main = paste("WC, ally = 0;",mean(withering_claw_sim0)), xlim = c(0, max_label))
## mindthief_sims
mindthief_attack_deck = c(2,3,1,3,1,2,1,1)
##
base_modifier_deck <- c(0, 0, 0, 0, 0,0, 1,1,1,1,1,-1,-1,-1,-1,-1, 2, -2, "2x", "miss")
## 2. set augment
mt_augments <- list(minds_weakness = list(attack = 2, debuff = "", buff = ""),
withering_claw = list(attack = 0, debuff = "poison, muddle", buff = ""),
feedback_loop = list(attack = 0, debuff = "", buff = "+1 shield"))
minds_weakness_sim1 = replicate(1000, expr = sim_mindthief(modifier_deck = base_modifier_deck, attack_deck = mindthief_attack_deck, augment = mt_augments[[1]], ally = 1))
minds_weakness_sim0 = replicate(1000, expr = sim_mindthief(modifier_deck = base_modifier_deck, attack_deck = mindthief_attack_deck, augment = mt_augments[[1]], ally = 0))
withering_claw_sim1 = replicate(1000, expr = sim_mindthief(modifier_deck = base_modifier_deck, attack_deck = mindthief_attack_deck, augment = mt_augments[[2]], ally = 1))
withering_claw_sim0 = replicate(1000, expr = sim_mindthief(modifier_deck = base_modifier_deck, attack_deck = mindthief_attack_deck, augment = mt_augments[[2]], ally = 0))
minds_weakness_sim2 = replicate(1000, expr = sim_mindthief(modifier_deck = base_modifier_deck, attack_deck = mindthief_attack_deck, augment = mt_augments[[1]], ally = 2))
withering_claw_sim2 = replicate(1000, expr = sim_mindthief(modifier_deck = base_modifier_deck, attack_deck = mindthief_attack_deck, augment = mt_augments[[2]], ally = 2))
par(mfrow=c(3,2))
max_label = max(minds_weakness_sim1, minds_weakness_sim0, withering_claw_sim1, withering_claw_sim0, withering_claw_sim2, minds_weakness_sim2)
hist(minds_weakness_sim2, main = paste("TMW, ally = 2;",mean(minds_weakness_sim2)), xlim = c(0, max_label))
hist(withering_claw_sim2, main = paste("WC, ally = 2;",mean(withering_claw_sim2)), xlim = c(0, max_label))
hist(minds_weakness_sim1, main = paste("TMW, ally = 1;", mean(minds_weakness_sim1)), xlim = c(0, max_label))
hist(withering_claw_sim1, main = paste("WC, ally = 1;",mean(withering_claw_sim1)), xlim = c(0, max_label))
hist(minds_weakness_sim0, main = paste("TMW, ally = 0;",mean(minds_weakness_sim0)), xlim = c(0, max_label))
hist(withering_claw_sim0, main = paste("WC, ally = 0;",mean(withering_claw_sim0)), xlim = c(0, max_label))
source("function_mindthief.R")
## mindthief_sims
mindthief_attack_deck = c(2,3,1,3,1,2,1,1)
##
base_modifier_deck <- c(0, 0, 0, 0, 0,0, 1,1,1,1,1,-1,-1,-1,-1,-1, 2, -2, "2x", "miss")
## 2. set augment
mt_augments <- list(minds_weakness = list(attack = 2, debuff = "", buff = ""),
withering_claw = list(attack = 0, debuff = "poison, muddle", buff = ""),
feedback_loop = list(attack = 0, debuff = "", buff = "+1 shield"))
source("function_mindthief.R")
withering_claw_sim3 = replicate(1000, expr = sim_mindthief(modifier_deck = base_modifier_deck, attack_deck = mindthief_attack_deck, augment = mt_augments[[2]], ally = 3))
hist(minds_weakness_sim3, main = paste("TMW, ally = 3;",mean(minds_weakness_sim3)), xlim = c(0, max_label))
## mindthief_sims
mindthief_attack_deck = c(2,3,1,3,1,2,1,1)
##
base_modifier_deck <- c(0, 0, 0, 0, 0,0, 1,1,1,1,1,-1,-1,-1,-1,-1, 2, -2, "2x", "miss")
## 2. set augment
mt_augments <- list(minds_weakness = list(attack = 2, debuff = "", buff = ""),
withering_claw = list(attack = 0, debuff = "poison, muddle", buff = ""),
feedback_loop = list(attack = 0, debuff = "", buff = "+1 shield"))
source("function_mindthief.R")
minds_weakness_sim1 = replicate(1000, expr = sim_mindthief(modifier_deck = base_modifier_deck, attack_deck = mindthief_attack_deck, augment = mt_augments[[1]], ally = 1))
minds_weakness_sim0 = replicate(1000, expr = sim_mindthief(modifier_deck = base_modifier_deck, attack_deck = mindthief_attack_deck, augment = mt_augments[[1]], ally = 0))
withering_claw_sim1 = replicate(1000, expr = sim_mindthief(modifier_deck = base_modifier_deck, attack_deck = mindthief_attack_deck, augment = mt_augments[[2]], ally = 1))
withering_claw_sim0 = replicate(1000, expr = sim_mindthief(modifier_deck = base_modifier_deck, attack_deck = mindthief_attack_deck, augment = mt_augments[[2]], ally = 0))
minds_weakness_sim2 = replicate(1000, expr = sim_mindthief(modifier_deck = base_modifier_deck, attack_deck = mindthief_attack_deck, augment = mt_augments[[1]], ally = 2))
withering_claw_sim2 = replicate(1000, expr = sim_mindthief(modifier_deck = base_modifier_deck, attack_deck = mindthief_attack_deck, augment = mt_augments[[2]], ally = 2))
withering_claw_sim3 = replicate(1000, expr = sim_mindthief(modifier_deck = base_modifier_deck, attack_deck = mindthief_attack_deck, augment = mt_augments[[2]], ally = 3))
minds_weakness_sim3 = replicate(1000, expr = sim_mindthief(modifier_deck = base_modifier_deck, attack_deck = mindthief_attack_deck, augment = mt_augments[[1]], ally = 3))
max_label = max(minds_weakness_sim1, minds_weakness_sim0, withering_claw_sim1, withering_claw_sim0, withering_claw_sim2, minds_weakness_sim2)
hist(minds_weakness_sim3, main = paste("TMW, ally = 3;",mean(minds_weakness_sim3)), xlim = c(0, max_label))
hist(minds_weakness_sim3, main = paste("TMW, ally = 3;",mean(minds_weakness_sim3)), xlim = c(0, max_label))
abline(h=5)
hist(minds_weakness_sim3, main = paste("TMW, ally = 3;",mean(minds_weakness_sim3)), xlim = c(0, max_label)); abline(v=mean(minds_weakness_sim3),col='red')
? abline
